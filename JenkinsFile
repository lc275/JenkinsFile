你可以使用 HTML + CSS + JavaScript 来实现这个导航栏，并使用 JavaScript 配置文件 来管理工具列表，使其易于维护和扩展。以下是实现思路和代码示例：


---

实现方案

1. 工具列表配置：

通过 JavaScript 配置 读取工具列表，前 5 个显示在导航栏，剩余的放入 "更多" 下拉菜单。



2. 导航栏结构：

使用 nav 标签 + ul 结构实现主要工具。

使用 dropdown 结构放置 "更多" 选项。



3. 自动嵌入：

通过 JavaScript 动态加载，在所有工具页面 自动插入导航栏。





---

代码示例

1. 配置工具列表（tools.js）

const tools = [
    { name: "工具1", url: "tool1.html" },
    { name: "工具2", url: "tool2.html" },
    { name: "工具3", url: "tool3.html" },
    { name: "工具4", url: "tool4.html" },
    { name: "工具5", url: "tool5.html" },
    { name: "工具6", url: "tool6.html" },
    { name: "工具7", url: "tool7.html" },
    { name: "工具8", url: "tool8.html" }
];


---

2. 导航栏 HTML & CSS

（nav.html，供 JavaScript 自动插入到各个页面中）

<nav id="tool-navbar">
    <ul id="main-tools"></ul>
    <div id="more-dropdown">
        <button id="more-btn">更多 ▼</button>
        <ul id="more-tools"></ul>
    </div>
</nav>

<style>
    #tool-navbar {
        display: flex;
        background: #333;
        padding: 10px;
        align-items: center;
    }
    #tool-navbar ul {
        list-style: none;
        padding: 0;
        margin: 0;
        display: flex;
    }
    #tool-navbar li {
        margin-right: 15px;
    }
    #tool-navbar a {
        color: white;
        text-decoration: none;
        padding: 8px 12px;
        background: #444;
        border-radius: 5px;
    }
    #more-dropdown {
        position: relative;
    }
    #more-tools {
        display: none;
        position: absolute;
        background: #444;
        top: 100%;
        left: 0;
        list-style: none;
        padding: 5px;
        margin: 0;
        border-radius: 5px;
    }
    #more-tools li {
        margin: 5px 0;
    }
    #more-btn {
        background: #555;
        color: white;
        border: none;
        padding: 8px 12px;
        cursor: pointer;
        border-radius: 5px;
    }
    #more-dropdown:hover #more-tools {
        display: block;
    }
</style>


---

3. JavaScript 动态插入导航栏（navbar.js）

async function loadNavbar() {
    // 读取工具列表
    const response = await fetch("tools.js");
    const tools = await response.json();

    const mainToolsContainer = document.getElementById("main-tools");
    const moreToolsContainer = document.getElementById("more-tools");

    // 显示前 5 个工具
    tools.slice(0, 5).forEach(tool => {
        const li = document.createElement("li");
        li.innerHTML = `<a href="${tool.url}">${tool.name}</a>`;
        mainToolsContainer.appendChild(li);
    });

    // 剩余的工具放入 "更多"
    tools.slice(5).forEach(tool => {
        const li = document.createElement("li");
        li.innerHTML = `<a href="${tool.url}">${tool.name}</a>`;
        moreToolsContainer.appendChild(li);
    });
}

// 自动加载导航栏
document.addEventListener("DOMContentLoaded", async () => {
    const navContainer = document.createElement("div");
    document.body.insertBefore(navContainer, document.body.firstChild);
    
    // 加载导航栏 HTML
    const response = await fetch("nav.html");
    navContainer.innerHTML = await response.text();
    
    // 加载导航栏工具
    loadNavbar();
});


---

4. 在所有工具页面引入

在每个工具页面的 <head> 部分添加：

<script src="navbar.js" defer></script>


---

最终效果

1. 自动插入导航栏 到所有页面。


2. 前 5 个工具 直接展示。


3. "更多" 按钮 展开剩余工具。


4. 工具列表可通过 tools.js 轻松修改，适用于后续扩展。



这样，你的导航栏就能自动适配并嵌入所有工具页面了。

