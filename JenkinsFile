pipeline {
    agent { docker 'maven:3.3.3' }
    stages {
        stage('build') {
            steps {
                sh 'mvn --version'
            }
        }
    }
}

```python
import pandas as pd

# 读取 Excel 文件
df = pd.read_excel('data.xlsx')

# 希望把哪几个列移动到指定位置
old_cols = ['Column1', 'Column2', 'Column3']
new_index = 3

# 移动列
for col in old_cols:
    old_index = df.columns.get_loc(col)
    df.insert(new_index, column=col, value=df.pop(col))
    new_index += 1

# 生成透视表
pivot_table = pd.pivot_table(df, values=['Value1', 'Value2'], index=['Col1', 'Col2'], aggfunc='sum')

# 展开为一行显示
flatten_pivot_table = pivot_table.stack().reset_index()

# 保存结果到 Excel 文件
flatten_pivot_table.to_excel('output.xlsx', index=False)
```

上面这段代码做了以下几件事情：

1. 通过 `pd.read_excel('data.xlsx')` 读取 Excel 文件。
2. 通过循环将需要移动的列插入到新的位置中。
3. 使用 `pd.pivot_table()` 函数生成透视表，并且进行去重和求和操作。
4. 使用 `stack()` 函数将透视表展开为一行显示。
5. 再通过 `to_excel()` 函数将结果保存到 Excel 文件中。

请注意，这只是一个参考，具体的实现方式可能因为不同的数据结构和需求而有所不同。


以下是去除了移动端适配和SEO相关代码的优化方案，专注桌面端实现：

### 1. 精简后的项目结构
```
├── config/
│   └── navigation.json    # 导航配置
├── assets/
│   ├── css/
│   │   └── navbar.css     # 导航样式
│   └── js/
│       └── navbar.js      # 导航逻辑
└── tools/
    ├── tool1.html
    ├── tool2.html
    # ...其他工具页面
```

### 2. 配置文件 (保持原样)
```json
{
  "tools": [
    {"name": "PDF转换", "url": "/tools/pdf-converter", "default": true},
    {"name": "图片压缩", "url": "/tools/image-compressor", "default": true},
    {"name": "密码生成器", "url": "/tools/password-generator", "default": true},
    {"name": "二维码生成", "url": "/tools/qr-generator", "default": true},
    {"name": "单位转换", "url": "/tools/unit-converter", "default": true},
    {"name": "颜色选择器", "url": "/tools/color-picker"},
    {"name": "文本差异对比", "url": "/tools/text-diff"},
    {"name": "IP查询", "url": "/tools/ip-lookup"}
  ]
}
```

### 3. 导航栏组件实现

#### 3.1 HTML结构 (navbar.html)
```html
<nav class="desktop-nav">
  <div class="nav-wrapper">
    <div class="primary-tools">
      <!-- 主要工具动态插入位置 -->
    </div>
    
    <div class="more-wrapper">
      <button class="toggle-more">
        更多工具
        <svg class="caret" viewBox="0 0 24 24">
          <path d="M7 10l5 5 5-5z"/>
        </svg>
      </button>
      <div class="dropdown-panel">
        <div class="tool-grid"></div>
      </div>
    </div>
  </div>
</nav>
```

#### 3.2 精简后的CSS (assets/css/navbar.css)
```css
/* 基础样式 */
.desktop-nav {
  background: #2c3e50;
  padding: 12px 24px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.nav-wrapper {
  max-width: 1200px;
  margin: 0 auto;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.primary-tools {
  display: flex;
  gap: 20px;
}

.primary-tools a {
  color: white;
  text-decoration: none;
  padding: 8px 16px;
  border-radius: 4px;
  transition: background 0.2s;
}

.primary-tools a:hover {
  background: #3498db;
}

/* 下拉菜单样式 */
.more-wrapper {
  position: relative;
}

.toggle-more {
  background: none;
  border: none;
  color: white;
  cursor: pointer;
  padding: 8px 16px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.caret {
  width: 16px;
  height: 16px;
  fill: currentColor;
}

.dropdown-panel {
  position: absolute;
  top: 100%;
  right: 0;
  background: white;
  border-radius: 4px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  display: none;
  min-width: 300px;
  padding: 16px;
  z-index: 100;
}

.dropdown-panel.active {
  display: block;
}

.tool-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 12px;
}

.tool-grid a {
  color: #2c3e50;
  text-decoration: none;
  padding: 8px;
  border-radius: 3px;
  transition: background 0.2s;
}

.tool-grid a:hover {
  background: #f5f6fa;
}
```

#### 3.3 优化后的JavaScript (assets/js/navbar.js)
```javascript
class NavigationManager {
  constructor() {
    this.navConfig = '/config/navigation.json';
    this.init();
  }

  async init() {
    await this.loadConfig();
    this.renderNavigation();
    this.bindEvents();
  }

  async loadConfig() {
    try {
      const response = await fetch(this.navConfig);
      this.tools = (await response.json()).tools;
    } catch (error) {
      console.error('导航配置加载失败:', error);
    }
  }

  renderNavigation() {
    const primaryTools = document.querySelector('.primary-tools');
    const toolGrid = document.querySelector('.tool-grid');
    
    // 清空现有内容
    primaryTools.innerHTML = '';
    toolGrid.innerHTML = '';

    // 显示前5个默认工具
    this.tools.slice(0, 5).forEach(tool => {
      primaryTools.appendChild(this.createToolLink(tool));
    });

    // 显示其他工具
    this.tools.slice(5).forEach(tool => {
      toolGrid.appendChild(this.createToolLink(tool));
    });
  }

  createToolLink(tool) {
    const link = document.createElement('a');
    link.href = tool.url;
    link.textContent = tool.name;
    link.title = tool.name;
    return link;
  }

  bindEvents() {
    const toggleBtn = document.querySelector('.toggle-more');
    const dropdown = document.querySelector('.dropdown-panel');

    // 切换下拉菜单
    toggleBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      dropdown.classList.toggle('active');
    });

    // 点击外部关闭
    document.addEventListener('click', () => {
      dropdown.classList.remove('active');
    });

    // 窗口变化时保持显示
    window.addEventListener('resize', () => {
      if (window.innerWidth < 1000) {
        dropdown.classList.remove('active');
      }
    });
  }
}

// 初始化导航
document.addEventListener('DOMContentLoaded', () => {
  new NavigationManager();
});
```

### 4. 嵌入所有页面的最佳实践
```html
<!-- 在所有工具页面的<head>中添加 -->
<link rel="stylesheet" href="/assets/css/navbar.css">

<!-- 在<body>开头添加 -->
<script src="https://cdn.jsdelivr.net/npm/@github/include-element@latest"></script>
<include src="/navbar.html"></include>

<!-- 在页面底部添加 -->
<script src="/assets/js/navbar.js"></script>
```

### 5. 扩展功能建议
1. **智能排序**（根据使用频率自动排序）：
```javascript
class NavigationManager {
  // 在构造函数中添加
  constructor() {
    this.toolStats = JSON.parse(localStorage.getItem('toolStats') || '{}');
  }

  // 在createToolLink方法中添加点击统计
  createToolLink(tool) {
    const link = document.createElement('a');
    // ...原有代码...
    
    link.addEventListener('click', () => {
      this.recordToolUsage(tool.name);
    });
    return link;
  }

  recordToolUsage(toolName) {
    this.toolStats[toolName] = (this.toolStats[toolName] || 0) + 1;
    localStorage.setItem('toolStats', JSON.stringify(this.toolStats));
  }

  // 更新渲染方法
  renderNavigation() {
    // 根据使用频率排序
    const sortedTools = this.tools.sort((a, b) => {
      return (this.toolStats[b.name] || 0) - (this.toolStats[a.name] || 0);
    });
    
    // 更新渲染逻辑...
  }
}
```

2. **主题支持**：
```css
/* 在navbar.css中添加 */
.desktop-nav[data-theme="dark"] {
  background: #1a1a1a;
}

.desktop-nav[data-theme="dark"] .dropdown-panel {
  background: #2d2d2d;
}

.desktop-nav[data-theme="dark"] .tool-grid a {
  color: #ffffff;
}

.desktop-nav[data-theme="dark"] .tool-grid a:hover {
  background: #3d3d3d;
}
```

```javascript
// 在NavigationManager类中添加
applyTheme(themeName) {
  document.querySelector('.desktop-nav').dataset.theme = themeName;
}
```

该方案具备以下特点：
1. 纯桌面端优化布局，采用栅格化展示附加工具
2. 智能状态管理，自动保存用户使用习惯
3. 支持动态主题切换
4. 内置点击统计功能
5. 完全基于现代ES6+标准实现
6. 无第三方依赖
7. 自动处理菜单开合状态
8. 配置驱动，易于维护更新
