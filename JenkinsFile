为了让 "更多" 下拉菜单的工具名称自适应长度，可以 动态调整宽度，确保不会被截断，同时保证整体样式美观。以下是改进的方案：


---

1. CSS 修改

#more-tools {
    display: none;
    position: absolute;
    background: #444;
    top: 100%;
    left: 0;
    list-style: none;
    padding: 5px;
    margin: 0;
    border-radius: 5px;
    min-width: 100px; /* 设置最小宽度，防止太窄 */
    white-space: nowrap; /* 防止文本换行 */
}

#more-tools li {
    margin: 5px 0;
    padding: 5px 10px;
}

#more-tools a {
    display: block;
    padding: 8px 12px;
    color: white;
    text-decoration: none;
    background: #555;
    border-radius: 5px;
}

#more-tools a:hover {
    background: #666;
}


---

2. JavaScript 修改

添加代码 自动计算最长工具名称的宽度，并调整 #more-tools 的宽度：

async function loadNavbar() {
    // 读取工具列表
    const response = await fetch("tools.js");
    const tools = await response.json();

    const mainToolsContainer = document.getElementById("main-tools");
    const moreToolsContainer = document.getElementById("more-tools");
    const moreBtn = document.getElementById("more-btn");
    const moreDropdown = document.getElementById("more-dropdown");

    // 显示前 5 个工具
    tools.slice(0, 5).forEach(tool => {
        const li = document.createElement("li");
        li.innerHTML = `<a href="${tool.url}">${tool.name}</a>`;
        mainToolsContainer.appendChild(li);
    });

    // 剩余的工具放入 "更多"
    tools.slice(5).forEach(tool => {
        const li = document.createElement("li");
        li.innerHTML = `<a href="${tool.url}">${tool.name}</a>`;
        moreToolsContainer.appendChild(li);
    });

    // **自适应下拉菜单宽度**
    setTimeout(() => {
        let maxWidth = 100; // 设定最小宽度
        moreToolsContainer.querySelectorAll("a").forEach(link => {
            const textWidth = link.offsetWidth + 20; // 计算文本宽度 + 额外间距
            if (textWidth > maxWidth) {
                maxWidth = textWidth;
            }
        });
        moreToolsContainer.style.minWidth = `${maxWidth}px`;
    }, 100);

    // 初始隐藏菜单
    moreToolsContainer.style.display = "none";

    // 绑定点击事件，展开/收回
    moreBtn.addEventListener("click", (event) => {
        event.stopPropagation(); // 阻止事件冒泡，防止触发 document 监听
        if (moreToolsContainer.style.display === "none") {
            moreToolsContainer.style.display = "block";
        } else {
            moreToolsContainer.style.display = "none";
        }
    });

    // 点击页面其他地方时，自动收起
    document.addEventListener("click", (event) => {
        if (!moreDropdown.contains(event.target)) {
            moreToolsContainer.style.display = "none";
        }
    });
}

// 自动加载导航栏
document.addEventListener("DOMContentLoaded", async () => {
    const navContainer = document.createElement("div");
    document.body.insertBefore(navContainer, document.body.firstChild);
    
    // 加载导航栏 HTML
    const response = await fetch("nav.html");
    navContainer.innerHTML = await response.text();
    
    // 加载导航栏工具
    loadNavbar();
});


---

3. 代码优化

✅ 关键改进

1. 动态计算最长工具名称的宽度：

计算所有 a 标签的 offsetWidth，找到最大值，作为 #more-tools 的 min-width。

避免工具名称过长导致菜单样式错乱。



2. 防止宽度太窄：

设定 最小宽度 100px，保证即使名字很短也不会太窄。



3. 确保计算生效：

使用 setTimeout(() => {...}, 100);，确保所有 a 标签都渲染完成后再计算宽度。





---

4. 最终效果

工具名称自适应宽度，不会被裁剪或换行。

"更多" 按钮展开时，菜单宽度自动调整，适应最长的工具名称。

点击 "更多" 之外的区域时，菜单自动收起。


这样你的导航栏会更美观、更符合用户体验！

